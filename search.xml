<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo NexT主题优化</title>
    <url>/2024/09/19/2024-09-19-%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="1-使用next主题"><a href="#1-使用next主题" class="headerlink" title="1.使用next主题"></a>1.使用next主题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 更新npm</span><br><span class="line">npm update</span><br><span class="line"></span><br><span class="line"># 若不存在hexo则执行</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"># 存在直接执行</span><br><span class="line">hexo init my-blog</span><br><span class="line">cd my-blog</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># 在`my-blog`目录下 安装next主题</span><br><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line"># 打开`blog\_config.yml`, 修改`themes`为`next`</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># 找到`#site`</span><br><span class="line">title: MFIKC</span><br><span class="line">subtitle: 个人博客</span><br><span class="line">description: 涉及前端、后端、运维</span><br><span class="line">keywords: 前端,后端,运维</span><br><span class="line">author: MeverikC</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="2-更换风格"><a href="#2-更换风格" class="headerlink" title="2. 更换风格"></a>2. 更换风格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开 `blog\themes\next\_config.yml`, 找到`Schemes`</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<h3 id="3-动态背景"><a href="#3-动态背景" class="headerlink" title="3. 动态背景"></a>3. 动态背景</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog\themes\next</span><br><span class="line"></span><br><span class="line">git clone https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas-ribbon</span><br><span class="line"></span><br><span class="line"># 打开`themes\next\_config.yml`, 找到`canvas_ribbon`</span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true # true 打开</span><br></pre></td></tr></table></figure>

<h3 id="4-文章加密"><a href="#4-文章加密" class="headerlink" title="4. 文章加密"></a>4. 文章加密</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install --save hexo-blog-encrypt</span><br><span class="line"># blog\themes\next\_config.yml</span><br><span class="line">encrypt:</span><br><span class="line">  enable: true</span><br><span class="line">  default_abstract: 这篇文章已加密，请输入密码查看。</span><br><span class="line">  default_message: 请输入密码访问。</span><br><span class="line"># 在`.md`文件头添加</span><br><span class="line">password: mypassword</span><br></pre></td></tr></table></figure>

<h3 id="5-搜索"><a href="#5-搜索" class="headerlink" title="5. 搜索"></a>5. 搜索</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装依赖</span><br><span class="line">npm install hexo-generator-searchdb</span><br><span class="line"></span><br><span class="line"># 打开`blog\_config.yml`, 添加</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br><span class="line">  </span><br><span class="line"># 打开`blog\themes\next\_config.yml`, 找到`local_search:`, 修改为</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>

<h3 id="6-标签样式"><a href="#6-标签样式" class="headerlink" title="6. 标签样式"></a>6. 标签样式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开`blog\next\_config.yml`, 找到`tag_icon: false`, 改为</span><br><span class="line">tag_icon: true</span><br></pre></td></tr></table></figure>

<h3 id="7-头像"><a href="#7-头像" class="headerlink" title="7. 头像"></a>7. 头像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 把头像照片放进`blog\next\source\images`下, 起名为`avatar.jpg`</span><br><span class="line"># 打开`blog\next\_config.yml`, 找到`# Sidebar Avatar`</span><br><span class="line">avatar:</span><br><span class="line">  url: /images/avatar.jpg # 添加头像</span><br><span class="line">  rounded: true # 为true则圆形展示 </span><br><span class="line">  rotated: true # 为true则随光标旋转</span><br></pre></td></tr></table></figure>

<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8. 代码块"></a>8. 代码块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开`blog\next\_config.yml`</span><br><span class="line">codeblock:</span><br><span class="line">  highlight_theme: night blue</span><br><span class="line">  # 复制按钮</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # 展示复制结果</span><br><span class="line">    show_result: true</span><br><span class="line">    # 可用值: default | flat | mac</span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure>

<h3 id="9-链接样式"><a href="#9-链接样式" class="headerlink" title="9. 链接样式"></a>9. 链接样式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开`themes\next\source\css\_common\components\post\post.styl`, 在末尾添加如下css样式：</span><br><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-主页文章顺序设置"><a href="#10-主页文章顺序设置" class="headerlink" title="10. 主页文章顺序设置"></a>10. 主页文章顺序设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 主页设置</span><br><span class="line"># path: 你的博客索引页的根路径。(默认 = &#x27;&#x27;)</span><br><span class="line"># per_page: 每页显示的文章数。(0 = 禁用分页)</span><br><span class="line"># order_by: 文章排序方式。(默认按日期降序排列)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure>

<h3 id="11-归档目录排序"><a href="#11-归档目录排序" class="headerlink" title="11. 归档目录排序"></a>11. 归档目录排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开`blog\_config.yml`, 添加:</span><br><span class="line">archive_generator:</span><br><span class="line">  order_by: -top # top为每篇文章前的yml配置</span><br></pre></td></tr></table></figure>

<h3 id="12-部署"><a href="#12-部署" class="headerlink" title="12. 部署"></a>12. 部署</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"># 打开`blog\_config.yml`, 找到`deploy:`</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">  	github: https://github.com/MeverikC/meverikc.github.io.git</span><br><span class="line">  	gitee: https://gitee.com/你的用户名/你的仓库名.git,分支名</span><br><span class="line">  branch: master</span><br><span class="line">  message: &quot;Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 部署到github上</span><br><span class="line">hexo clean #清除之前生成的东西</span><br><span class="line">hexo generate  #生成静态文章，缩写hexo g</span><br><span class="line">hexo deploy  #部署文章，缩写hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-2</title>
    <url>/2024/09/30/2024-09-30-Java-2/</url>
    <content><![CDATA[<h2 id="Java编程认识"><a href="#Java编程认识" class="headerlink" title="Java编程认识"></a>Java编程认识</h2><h3 id="1-Java-Application初步"><a href="#1-Java-Application初步" class="headerlink" title="1.  Java Application初步"></a>1.  Java Application初步</h3><ol>
<li><p>Java源文件以.java为扩展名,文件名与类名一致</p>
</li>
<li><p>一个源文件只能有一个public公共类</p>
</li>
<li><p>java应用程序的执行入口-&gt;main()方法,书写格式-&gt;public static void main(String[] args){}  <span id="more"></span></p>
</li>
<li><p>java严格区分大小写</p>
</li>
<li><p>java方法由一条条语句构成,每个语句以分号结束</p>
</li>
<li><p>Java的注释方式-</p>
<ol>
<li><p>单行注释</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 单行注释</span><br></pre></td></tr></table></figure>

</li>
<li><p>多行注释</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 多行注释1 */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * 多行注释2</span><br><span class="line">  */</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="2-命名"><a href="#2-命名" class="headerlink" title="2. 命名"></a>2. 命名</h3><ol>
<li><p>类名的首字母大写</p>
</li>
<li><p>变量名和方法名的首字母小写</p>
</li>
<li><p>运用驼峰标识</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 单词之间没有空格或下划线，第一个单词的首字母通常大写，而后续单词的首字母大写</span><br><span class="line">MinervaController // 类名</span><br><span class="line">2. 第一个单词的首字母通常小写</span><br><span class="line">startDate // 变量名</span><br><span class="line">getDate // 方法名</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-标识符"><a href="#3-标识符" class="headerlink" title="3. 标识符"></a>3. 标识符</h3><ol>
<li><p>Java对各种<code>变量\方法</code>和<code>类</code>等要素命名时使用的字符序列称位<code>标识符</code>, 凡是自己可以起名字的地方都叫标识符</p>
</li>
<li><p>Java标识符的命名规则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 由字母\下划线_\美元符$\数字组成</span><br><span class="line">2. 应以字母\下划线\美元符开头</span><br><span class="line">3. 大小写敏感,长度无限制</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-关键字"><a href="#4-关键字" class="headerlink" title="4. 关键字"></a>4. 关键字</h3><p>一些以特定的含义,用作专门的用途的字符称为关键字, 所有关键字均为小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goto\const # 被保留</span><br><span class="line">abstract\default\if\private\this</span><br><span class="line">boolean\do\implements\protected\throw</span><br><span class="line">break\double\import\public\throws</span><br><span class="line">byte\else\instanceof\return\transient</span><br><span class="line">case\extends\int\short\try</span><br><span class="line">catch\final\interface\static\void</span><br><span class="line">char\finally\long\strictfp\volatile</span><br><span class="line">class\float\native\super\while</span><br><span class="line">const\for\new\switch\null</span><br><span class="line">continue\goto\package\synchronized</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>关键字</strong> 在下一篇详细介绍</p>
</blockquote>
<h3 id="5-java常量"><a href="#5-java常量" class="headerlink" title="5. java常量"></a>5. java常量</h3><ul>
<li><p>使用<code>final</code>关键字定义常量</p>
<ul>
<li><p><code>final</code> 关键字可以用于基本数据类型和对象引用，确保它们的值不会被改变。一旦一个变量被声明为 <code>final</code>，它的值就不能再被修改。这适用于所有数据类型，包括基本类型和对象。</p>
</li>
<li><p>示例: </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantsExample</span> &#123;</span><br><span class="line">    <span class="comment">// 定义基本类型的常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_SIZE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义对象类型的常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_NAME</span> <span class="operator">=</span> <span class="string">&quot;My Application&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">LocalDate</span> <span class="variable">START_DATE</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Max Size: &quot;</span> + MAX_SIZE);</span><br><span class="line">        System.out.println(<span class="string">&quot;PI: &quot;</span> + PI);</span><br><span class="line">        System.out.println(<span class="string">&quot;App Name: &quot;</span> + APP_NAME);</span><br><span class="line">        System.out.println(<span class="string">&quot;Start Date: &quot;</span> + START_DATE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用枚举（<code>enum</code>）定义常量</p>
<ul>
<li><p>枚举是一种特殊的类，用来表示一组固定的常量。枚举在 Java 5 中引入，提供了一种更安全、更清晰的方式来定义常量集合。</p>
</li>
<li><p>示例: </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED, GREEN, BLUE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">myColor</span> <span class="operator">=</span> Color.RED;</span><br><span class="line">        System.out.println(<span class="string">&quot;My color is: &quot;</span> + myColor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>常量的作用</p>
<ol>
<li><strong>代码可读性</strong>：使用常量可以使代码更具可读性和可维护性，因为常量名通常比硬编码的数字或字符串更容易理解。</li>
<li><strong>避免错误</strong>：常量可以防止在程序中多次使用相同的值时出现的拼写错误或数值错误。</li>
<li><strong>单一职责原则</strong>：如果需要更改某个值，只需在一个地方更改，而不必在整个代码库中查找和替换。</li>
<li><strong>类型安全</strong>：枚举提供了类型安全，确保只能使用预定义的值。</li>
</ol>
</li>
<li><p>注意事项</p>
<ul>
<li>常量通常使用大写字母命名，以提高可读性。</li>
<li>对于 <code>final</code> 变量，如果是在声明时初始化的，那么它必须被初始化；如果是在声明时不初始化，则必须在构造器中初始化。</li>
<li>枚举常量是隐式 <code>public</code>, <code>static</code>, 和 <code>final</code> 的，因此不能被改变</li>
</ul>
</li>
</ul>
<h3 id="6-java变量"><a href="#6-java变量" class="headerlink" title="6. java变量"></a>6. java变量</h3><p>程序中最基本的存储单元,要素包括变量名,变量类型和作用域, 每一个变量都属于特定的数据类型,在使用前必须对其声明,声明格式为type varName &#x3D; value<br>在 Java 中，数据类型分为两大类：基本数据类型（Primitive Data Types）和引用数据类型（Reference Data Types）。每种数据类型都有其特定的用途和特点。下面是对这两种数据类型的详细介绍：</p>
<h4 id="基本数据类型（Primitive-Data-Types）"><a href="#基本数据类型（Primitive-Data-Types）" class="headerlink" title="基本数据类型（Primitive Data Types）"></a>基本数据类型（Primitive Data Types）</h4><p>基本数据类型是 Java 中最简单的数据类型，它们直接存储值。Java 有 8 种基本数据类型：</p>
<ol>
<li><p><strong><code>byte</code></strong></p>
<ul>
<li>大小：8 位（1 字节）</li>
<li>范围：-128 到 127</li>
<li>用途：存储较小的整数，节省内存</li>
</ul>
</li>
<li><p><strong><code>short</code></strong></p>
<ul>
<li>大小：16 位（2 字节）</li>
<li>范围：-32,768 到 32,767</li>
<li>用途：存储中等大小的整数</li>
</ul>
</li>
<li><p><strong><code>int</code></strong></p>
<ul>
<li>大小：32 位（4 字节）</li>
<li>范围：-2,147,483,648 到 2,147,483,647</li>
<li>用途：最常用的整数类型</li>
</ul>
</li>
<li><p><strong><code>long</code></strong></p>
<ul>
<li>大小：64 位（8 字节）</li>
<li>范围：-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</li>
<li>用途：存储非常大的整数</li>
</ul>
</li>
<li><p><strong><code>float</code></strong></p>
<ul>
<li>大小：32 位（4 字节）</li>
<li>范围：约 ±1.4e-45 到 ±3.4e38</li>
<li>用途：存储单精度浮点数</li>
</ul>
</li>
<li><p><strong><code>double</code></strong></p>
<ul>
<li>大小：64 位（8 字节）</li>
<li>范围：约 ±4.9e-324 到 ±1.8e308</li>
<li>用途：存储双精度浮点数，精度更高</li>
</ul>
</li>
<li><p><strong><code>char</code></strong></p>
<ul>
<li>大小：16 位（2 字节）</li>
<li>范围：’\u0000’ 到 ‘\uffff’（0 到 65,535）</li>
<li>用途：存储单个 Unicode 字符</li>
</ul>
</li>
<li><p><strong><code>boolean</code></strong></p>
<ul>
<li>大小：1 位（实际占用内存取决于 JVM 实现）</li>
<li>范围：<code>true</code> 或 <code>false</code></li>
<li>用途：存储布尔值</li>
</ul>
</li>
</ol>
<h4 id="引用数据类型（Reference-Data-Types）"><a href="#引用数据类型（Reference-Data-Types）" class="headerlink" title="引用数据类型（Reference Data Types）"></a>引用数据类型（Reference Data Types）</h4><p>引用数据类型存储的是对象的引用（即地址），而不是对象本身。Java 中的主要引用数据类型包括：</p>
<ol>
<li><p><strong>类（Class）</strong></p>
<ul>
<li>例如：<code>String</code>, <code>Integer</code>, <code>ArrayList</code> 等</li>
<li>用途：表示复杂的对象结构，可以包含属性和方法</li>
</ul>
</li>
<li><p><strong>接口（Interface）</strong></p>
<ul>
<li>例如：<code>List</code>, <code>Runnable</code> 等</li>
<li>用途：定义行为规范，多个类可以实现同一个接口</li>
</ul>
</li>
<li><p><strong>数组（Array）</strong></p>
<ul>
<li>例如：<code>int[]</code>, <code>String[]</code> 等</li>
<li>用途：存储相同类型的多个元素</li>
</ul>
</li>
<li><p><strong>枚举（Enum）</strong></p>
<ul>
<li>例如：<code>Color</code>（RED, GREEN, BLUE）</li>
<li>用途：表示一组固定的常量</li>
</ul>
</li>
</ol>
<p><strong>示例:</strong> </p>
<ul>
<li>基本数据类型示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimitiveTypesExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">10000000000L</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">3.14f</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">3.141592653589793</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bool</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;byte: &quot;</span> + b);</span><br><span class="line">        System.out.println(<span class="string">&quot;short: &quot;</span> + s);</span><br><span class="line">        System.out.println(<span class="string">&quot;int: &quot;</span> + i);</span><br><span class="line">        System.out.println(<span class="string">&quot;long: &quot;</span> + l);</span><br><span class="line">        System.out.println(<span class="string">&quot;float: &quot;</span> + f);</span><br><span class="line">        System.out.println(<span class="string">&quot;double: &quot;</span> + d);</span><br><span class="line">        System.out.println(<span class="string">&quot;char: &quot;</span> + c);</span><br><span class="line">        System.out.println(<span class="string">&quot;boolean: &quot;</span> + bool);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>引用数据类型示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReferenceTypesExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;String: &quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;Array: &quot;</span> + Arrays.toString(numbers));</span><br><span class="line">        System.out.println(<span class="string">&quot;List: &quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>总结</p>
<ul>
<li><p><strong>基本数据类型</strong>：直接存储值，效率高，但功能有限。</p>
</li>
<li><p><strong>引用数据类型</strong>：存储对象的引用，功能强大，可以表示复杂的数据结构。</p>
</li>
</ul>
</li>
</ul>
<h3 id="7-程序格式"><a href="#7-程序格式" class="headerlink" title="7. 程序格式"></a>7. 程序格式</h3><p>格式应该注意的问题: </p>
<ol>
<li>大括号对齐, 到<code>&#123;</code>时缩进,键盘快捷方式: tab&#x2F;shift+tab</li>
<li>程序块之间加空行, 排语句之间加空格</li>
<li>运算符两侧加空格, <code>&#123;</code> 前面有空格</li>
<li>成对编程</li>
</ol>
<h3 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8. 运算符"></a>8. 运算符</h3><ol>
<li><p>算数运算符</p>
<p> 算术运算符用于执行基本的数学运算。</p>
<ul>
<li><p>加法 (<code>+</code>)：将两个操作数相加。</p>
</li>
<li><p>减法 (<code>-</code>)：从第一个操作数中减去第二个操作数。</p>
</li>
<li><p>乘法 (<code>\*</code>)：将两个操作数相乘。</p>
</li>
<li><p>除法 (<code>/</code>)：将第一个操作数除以第二个操作数。</p>
</li>
<li><p>取模 (<code>%</code>)：返回两个操作数相除后的余数。</p>
</li>
<li><p>自增 (<code>++</code>)：将操作数的值增加 1。</p>
</li>
<li><p>自减 (<code>--</code>)：将操作数的值减少 1。</p>
</li>
<li><p>示例: </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b;       <span class="comment">// 13</span></span><br><span class="line"><span class="type">int</span> <span class="variable">difference</span> <span class="operator">=</span> a - b; <span class="comment">// 7</span></span><br><span class="line"><span class="type">int</span> <span class="variable">product</span> <span class="operator">=</span> a * b;   <span class="comment">// 30</span></span><br><span class="line"><span class="type">int</span> <span class="variable">quotient</span> <span class="operator">=</span> a / b;  <span class="comment">// 3</span></span><br><span class="line"><span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> a % b; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a++; <span class="comment">// a 现在是 11</span></span><br><span class="line">b--; <span class="comment">// b 现在是 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>关系运算符</p>
<p> 关系运算符用于比较两个操作数，结果是一个布尔值（<code>true</code> 或 <code>false</code>）。</p>
<ul>
<li><p>等于 (<code>==</code>)：检查两个操作数是否相等。</p>
</li>
<li><p>不等于 (<code>!=</code>)：检查两个操作数是否不相等。</p>
</li>
<li><p>大于 (<code>&gt;</code>)：检查第一个操作数是否大于第二个操作数。</p>
</li>
<li><p>小于 (<code>&lt;</code>)：检查第一个操作数是否小于第二个操作数。</p>
</li>
<li><p>大于等于 (<code>&gt;=</code>)：检查第一个操作数是否大于或等于第二个操作数。</p>
</li>
<li><p>小于等于 (<code>&lt;=</code>)：检查第一个操作数是否小于或等于第二个操作数。</p>
</li>
<li><p>示例: </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> (x == y);      <span class="comment">// false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isNotEqual</span> <span class="operator">=</span> (x != y);   <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isGreaterThan</span> <span class="operator">=</span> (x &gt; y); <span class="comment">// false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLessThan</span> <span class="operator">=</span> (x &lt; y);    <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isGreaterThanOrEqual</span> <span class="operator">=</span> (x &gt;= y); <span class="comment">// false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLessThanOrEqual</span> <span class="operator">=</span> (x &lt;= y);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>逻辑运算符</p>
<p> 逻辑运算符用于组合多个布尔表达式，结果也是一个布尔值。</p>
<ul>
<li><p>逻辑与 (<code>&amp;&amp;</code>)：如果两个操作数都为 <code>true</code>，则结果为 <code>true</code>。</p>
</li>
<li><p>逻辑或 (<code>||</code>)：如果两个操作数中至少有一个为 <code>true</code>，则结果为 <code>true</code>。</p>
</li>
<li><p>逻辑非 (<code>!</code>)：反转操作数的布尔值。</p>
</li>
<li><p>示例: </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">p</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">q</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">andResult</span> <span class="operator">=</span> (p &amp;&amp; q); <span class="comment">// false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">orResult</span> <span class="operator">=</span> (p || q);  <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">notResult</span> <span class="operator">=</span> !p;       <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>位运算符</p>
<p> 位运算符用于对二进制位进行操作。</p>
<ul>
<li><p>按位与 (<code>&amp;</code>)：对两个操作数的每一位进行与操作。</p>
</li>
<li><p>按位或 (<code>|</code>)：对两个操作数的每一位进行或操作。</p>
</li>
<li><p>按位异或 (<code>^</code>)：对两个操作数的每一位进行异或操作。</p>
</li>
<li><p>按位非 (<code>~</code>)：对操作数的每一位进行取反操作。</p>
</li>
<li><p>左移 (<code>&lt;&lt;</code>)：将操作数的二进制位向左移动指定的位数。</p>
</li>
<li><p>右移 (<code>&gt;&gt;</code>)：将操作数的二进制位向右移动指定的位数，高位补符号位。</p>
</li>
<li><p>无符号右移 (<code>&gt;&gt;&gt;</code>)：将操作数的二进制位向右移动指定的位数，高位补零</p>
</li>
<li><p>示例: </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">5</span>;  <span class="comment">// 二进制: 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">3</span>;  <span class="comment">// 二进制: 0011</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">andResult</span> <span class="operator">=</span> (m &amp; n); <span class="comment">// 0001 -&gt; 1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">orResult</span> <span class="operator">=</span> (m | n);  <span class="comment">// 0111 -&gt; 7</span></span><br><span class="line"><span class="type">int</span> <span class="variable">xorResult</span> <span class="operator">=</span> (m ^ n); <span class="comment">// 0110 -&gt; 6</span></span><br><span class="line"><span class="type">int</span> <span class="variable">notResult</span> <span class="operator">=</span> ~m;      <span class="comment">// 11111111111111111111111111111010 -&gt; -6</span></span><br><span class="line"><span class="type">int</span> <span class="variable">leftShift</span> <span class="operator">=</span> (m &lt;&lt; <span class="number">1</span>); <span class="comment">// 1010 -&gt; 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rightShift</span> <span class="operator">=</span> (m &gt;&gt; <span class="number">1</span>); <span class="comment">// 0010 -&gt; 2</span></span><br><span class="line"><span class="type">int</span> <span class="variable">unsignedRightShift</span> <span class="operator">=</span> (m &gt;&gt;&gt; <span class="number">1</span>); <span class="comment">// 0010 -&gt; 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>赋值运算符</p>
<p> 赋值运算符用于将一个值赋给一个变量。</p>
<ul>
<li><p>简单赋值 (<code>=</code>)：将右边的值赋给左边的变量。</p>
</li>
<li><p>复合赋值运算符</p>
<p>  ：结合了赋值和算术运算。</p>
<ul>
<li><p><code>+=</code>：加法赋值</p>
</li>
<li><p><code>-=</code>：减法赋值</p>
</li>
<li><p><code>*=</code>：乘法赋值</p>
</li>
<li><p><code>/=</code>：除法赋值</p>
</li>
<li><p><code>%=</code>：取模赋值</p>
</li>
<li><p><code>&amp;=</code>：按位与赋值</p>
</li>
<li><p><code>|=</code>：按位或赋值</p>
</li>
<li><p><code>^=</code>：按位异或赋值</p>
</li>
<li><p><code>&lt;&lt;=</code>：左移赋值</p>
</li>
<li><p><code>&gt;&gt;=</code>：右移赋值</p>
</li>
<li><p><code>&gt;&gt;&gt;=</code>：无符号右移赋值</p>
</li>
<li><p>示例: </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">x += <span class="number">5</span>; <span class="comment">// 相当于 x = x + 5; x 现在是 15</span></span><br><span class="line">x -= <span class="number">3</span>; <span class="comment">// 相当于 x = x - 3; x 现在是 12</span></span><br><span class="line">x *= <span class="number">2</span>; <span class="comment">// 相当于 x = x * 2; x 现在是 24</span></span><br><span class="line">x /= <span class="number">4</span>; <span class="comment">// 相当于 x = x / 4; x 现在是 6</span></span><br><span class="line">x %= <span class="number">5</span>; <span class="comment">// 相当于 x = x % 5; x 现在是 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>条件运算符（三元运算符）</p>
<p> 条件运算符（也称为三元运算符）根据条件的真假返回不同的值。</p>
<ul>
<li><p>条件运算符 (<code>? :</code>)：如果条件为 <code>true</code>，则返回第一个值；否则返回第二个值。</p>
</li>
<li><p>示例: </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (age &gt;= <span class="number">18</span>) ? <span class="string">&quot;成年&quot;</span> : <span class="string">&quot;未成年&quot;</span>;</span><br><span class="line">System.out.println(result); <span class="comment">// 输出 &quot;成年&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>类型转换运算符</p>
<p> 类型转换运算符用于在不同数据类型之间进行转换。</p>
<ul>
<li><p><strong>显式类型转换</strong>：将一个数据类型强制转换为另一个数据类型。</p>
</li>
<li><p><strong>隐式类型转换</strong>：编译器自动进行的类型转换。</p>
</li>
<li><p>示例: </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> intValue; <span class="comment">// 隐式类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10.5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>) d; <span class="comment">// 显式类型转换</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="9-表达式"><a href="#9-表达式" class="headerlink" title="9. 表达式"></a>9. 表达式</h3><h4 id="9-1-表达式"><a href="#9-1-表达式" class="headerlink" title="9.1 表达式"></a>9.1 表达式</h4><p>符合一定语法规则的运算符和操作数的序列</p>
<ol>
<li>表达式的类型和值</li>
<li>表达式的运算顺序</li>
<li>三目条件运算符<br>     语法格式-&gt;<code>x ? y : z</code></li>
</ol>
<h3 id="10-变量的作用域"><a href="#10-变量的作用域" class="headerlink" title="10. 变量的作用域"></a>10. 变量的作用域</h3><ol>
<li><p><strong>局部变量</strong>（Local Variable）：</p>
<ul>
<li><p>局部变量是在方法或代码块（如<code>for</code>循环或<code>if</code>语句）内部声明的变量。</p>
</li>
<li><p>局部变量只能在声明它的代码块中使用，当代码块结束后，局部变量的生命周期也结束。</p>
</li>
<li><p>局部变量必须在使用前初始化，否则编译器会报错。</p>
</li>
<li><p><strong>示例</strong>：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 局部变量x</span></span><br><span class="line">    System.out.println(x); <span class="comment">// 有效</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(x); <span class="comment">// 无效，编译错误</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>成员变量</strong>（Field&#x2F;Instance Variable）：</p>
<ul>
<li><p>成员变量是定义在类内部但在方法外部的变量，通常每个对象都有自己的成员变量。</p>
</li>
<li><p>成员变量的作用域是整个类，在类的所有方法中都可以访问。</p>
</li>
<li><p>成员变量在类的实例创建时被初始化，其生命周期与对象的生命周期一致。</p>
</li>
<li><p><strong>示例</strong>：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayNum</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(num); <span class="comment">// 可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>类变量</strong>（Static Variable）：</p>
<ul>
<li><p>类变量是使用<code>static</code>关键字声明的变量，属于类本身，而不是类的实例（对象）。</p>
</li>
<li><p>类变量的生命周期是整个程序的运行期，所有对象共享同一个类变量。</p>
</li>
<li><p><strong>示例</strong>：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticNum</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 类变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">displayStaticNum</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(staticNum); <span class="comment">// 通过类访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>方法参数</strong>（Parameter Variable）：</p>
<ul>
<li><p>方法参数是在方法声明中定义的，用于接收方法调用时传入的实际参数。</p>
</li>
<li><p>方法参数的作用域仅限于方法内部。</p>
</li>
<li><p><strong>示例</strong>：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">(<span class="type">int</span> param)</span> &#123;</span><br><span class="line">    System.out.println(param); <span class="comment">// 参数param的作用域在方法内</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="11-递归调用"><a href="#11-递归调用" class="headerlink" title="11. 递归调用"></a>11. 递归调用</h3><p>递归是一种直接或间接调用自身的方法。递归通常用于解决可以分解为相似的子问题的问题。在递归调用时，必须要有一个<strong>终止条件</strong>，否则会导致无限递归，从而引发栈溢出错误。</p>
<ul>
<li><p><strong>递归的基本结构</strong>：</p>
<ol>
<li><strong>终止条件</strong>：定义递归何时结束的条件。</li>
<li><strong>递归调用</strong>：方法在某些情况下调用自身。</li>
</ol>
</li>
<li><p><strong>示例</strong>：求阶乘的递归实现</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factorial</span> &#123;</span><br><span class="line">    <span class="comment">// 阶乘方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 终止条件：n等于1时返回1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>); <span class="comment">// 递归调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> factorial(<span class="number">5</span>); <span class="comment">// 调用递归方法</span></span><br><span class="line">        System.out.println(result); <span class="comment">// 输出120</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>递归的优缺点</strong>：</p>
<ul>
<li><strong>优点</strong>：递归简化了某些问题的解决方案，使代码更加简洁。</li>
<li><strong>缺点</strong>：递归可能消耗较多的内存和时间，特别是当递归深度过大时，容易导致栈溢出。</li>
</ul>
</li>
</ul>
<p>在 Java 中，分支语句和循环语句是控制程序流程的重要工具。它们允许你根据条件执行不同的代码块，或者重复执行某段代码。下面是对 Java 中主要的分支语句和循环语句的详细介绍。</p>
<h3 id="12-分支语句"><a href="#12-分支语句" class="headerlink" title="12. 分支语句"></a>12. 分支语句</h3><h4 id="1-if-语句"><a href="#1-if-语句" class="headerlink" title="1. if 语句"></a>1. <code>if</code> 语句</h4><p><code>if</code> 语句是最基本的条件分支语句，用于根据条件的真假来决定是否执行某段代码。</p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 执行代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;x 大于 5&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-if-else-语句"><a href="#2-if-else-语句" class="headerlink" title="2. if-else 语句"></a>2. <code>if-else</code> 语句</h4><p><code>if-else</code> 语句用于在条件为 <code>true</code> 时执行一个代码块，条件为 <code>false</code> 时执行另一个代码块。</p>
<h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 条件为 true 时执行的代码块</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件为 false 时执行的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;x 大于 5&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;x 不大于 5&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-if-else-if-else-语句"><a href="#3-if-else-if-else-语句" class="headerlink" title="3. if-else if-else 语句"></a>3. <code>if-else if-else</code> 语句</h4><p><code>if-else if-else</code> 语句用于处理多个条件分支。</p>
<h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">    <span class="comment">// 条件1为 true 时执行的代码块</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">    <span class="comment">// 条件2为 true 时执行的代码块</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 其他情况下执行的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">15</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;x 大于 15&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;x 大于 5 但不大于 15&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;x 不大于 5&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-switch-语句"><a href="#4-switch-语句" class="headerlink" title="4. switch 语句"></a>4. <code>switch</code> 语句</h4><p><code>switch</code> 语句用于根据变量的值执行不同的代码块。它通常用于处理多个离散的值。</p>
<h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        <span class="comment">// 代码块1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        <span class="comment">// 代码块2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 可以有多个 case</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 默认代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;无效的天数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13-循环语句"><a href="#13-循环语句" class="headerlink" title="13. 循环语句"></a>13. 循环语句</h3><h4 id="1-for-循环"><a href="#1-for-循环" class="headerlink" title="1. for 循环"></a>1. <code>for</code> 循环</h4><p><code>for</code> 循环用于在已知次数的情况下重复执行某段代码。</p>
<h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; increment/decrement) &#123;</span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i 的值是: &quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-while-循环"><a href="#2-while-循环" class="headerlink" title="2. while 循环"></a>2. <code>while</code> 循环</h4><p><code>while</code> 循环用于在条件为 <code>true</code> 时重复执行某段代码。</p>
<h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i 的值是: &quot;</span> + i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-do-while-循环"><a href="#3-do-while-循环" class="headerlink" title="3. do-while 循环"></a>3. <code>do-while</code> 循环</h4><p><code>do-while</code> 循环类似于 <code>while</code> 循环，但它是先执行一次代码块，然后再检查条件。</p>
<h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure>

<h5 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i 的值是: &quot;</span> + i);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4-for-each-循环"><a href="#4-for-each-循环" class="headerlink" title="4. for-each 循环"></a>4. <code>for-each</code> 循环</h4><p><code>for-each</code> 循环（也称为增强型 <code>for</code> 循环）用于遍历数组或集合中的每个元素。</p>
<h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (element : array/collection) &#123;</span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> number : numbers) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;数字是: &quot;</span> + number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制循环的语句"><a href="#控制循环的语句" class="headerlink" title="控制循环的语句"></a>控制循环的语句</h3><h4 id="1-break-语句"><a href="#1-break-语句" class="headerlink" title="1. break 语句"></a>1. <code>break</code> 语句</h4><p><code>break</code> 语句用于立即退出循环或 <code>switch</code> 语句。</p>
<h5 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;i 的值是: &quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-continue-语句"><a href="#2-continue-语句" class="headerlink" title="2. continue 语句"></a>2. <code>continue</code> 语句</h4><p><code>continue</code> 语句用于跳过当前循环的剩余部分，直接进入下一次循环。</p>
<h5 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;i 的值是: &quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><strong>分支语句</strong>：<code>if</code>, <code>if-else</code>, <code>if-else if-else</code>, <code>switch</code> 用于根据条件执行不同的代码块。</li>
<li><strong>循环语句</strong>：<code>for</code>, <code>while</code>, <code>do-while</code>, <code>for-each</code> 用于重复执行某段代码。</li>
<li><strong>控制循环的语句</strong>：<code>break</code> 用于退出循环，<code>continue</code> 用于跳过当前循环的剩余部分。</li>
</ul>
<p>掌握这些分支和循环语句，可以帮助你编写出更加灵活和强大的 Java 程序。希望这些信息对你有所帮助！</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-1</title>
    <url>/2024/09/29/2024-09-29-Java-1/</url>
    <content><![CDATA[<h2 id="计算机语言的历史及Java的历史地位"><a href="#计算机语言的历史及Java的历史地位" class="headerlink" title="计算机语言的历史及Java的历史地位"></a>计算机语言的历史及Java的历史地位</h2><h3 id="第一代语言"><a href="#第一代语言" class="headerlink" title="第一代语言"></a>第一代语言</h3><ul>
<li><strong>打孔机 - 纯机器语言</strong></li>
</ul>
<span id="more"></span>

<h3 id="第二代语言"><a href="#第二代语言" class="headerlink" title="第二代语言"></a>第二代语言</h3><ul>
<li><strong>汇编</strong></li>
</ul>
<h3 id="第三代语言"><a href="#第三代语言" class="headerlink" title="第三代语言"></a>第三代语言</h3><ul>
<li><strong>C、Pascal、Fortran</strong>：面向过程的语言</li>
<li>C++：面向过程&#x2F;面向对象</li>
<li><strong>Java</strong>：跨平台的纯面向对象语言</li>
<li><strong>.NET</strong>：跨语言的平台</li>
</ul>
<h2 id="Java自身的发展史"><a href="#Java自身的发展史" class="headerlink" title="Java自身的发展史"></a>Java自身的发展史</h2><h3 id="起源与初期发展"><a href="#起源与初期发展" class="headerlink" title="起源与初期发展"></a>起源与初期发展</h3><p>Java的开发始于1991年，由James Gosling领导的Sun Microsystems团队提出，最初的名字为“Oak”，目的是用于消费电子设备中的嵌入式系统。1995年，Java 1.0正式发布，并成为面向互联网和企业级应用开发的编程语言。</p>
<h3 id="关键版本演变"><a href="#关键版本演变" class="headerlink" title="关键版本演变"></a>关键版本演变</h3><ul>
<li>Java 1.0 (1995)：Java初次发布，具备“编写一次，随处运行”的核心理念。</li>
<li>Java 2 (1998)：引入了三大平台版本：J2SE（标准版）、J2EE（企业版）、J2ME（移动版），增强了面向企业和移动设备的开发。</li>
<li>Java 5 (2004)：引入泛型、枚举、增强型for循环等语言特性，极大提升了语言的灵活性与表达力。</li>
<li>Java 8 (2014)：最具革命性的一次更新，引入了Lambda表达式、Streams API等新特性，极大提升了并发和函数式编程的支持。</li>
<li>Java 9及以后：Java 9推出模块化系统（Project Jigsaw），Java 10引入局部变量类型推断，Java 11成为长期支持版（LTS）。</li>
</ul>
<h3 id="Oracle收购与开源"><a href="#Oracle收购与开源" class="headerlink" title="Oracle收购与开源"></a>Oracle收购与开源</h3><p>2010年，Oracle收购了Sun Microsystems，并接管了Java的发展。Java逐步转向开源社区驱动，Java SE平台下的OpenJDK成为Java的官方参考实现。</p>
<h2 id="Java体系"><a href="#Java体系" class="headerlink" title="Java体系"></a>Java体系</h2><ul>
<li><strong>Java SE（Standard Edition）</strong>：提供核心的Java库和API，涵盖语言基础、数据结构、并发、多线程、文件处理等，适用于桌面应用和核心后端开发。</li>
<li><strong>Java EE（Enterprise Edition）</strong>：侧重于企业级应用开发，提供了分布式计算、Web服务、数据库交互、JMS消息处理等特性。</li>
<li><strong>Java ME（Micro Edition）</strong>：适用于嵌入式和移动设备的精简版Java，过去用于开发功能手机和嵌入式系统。</li>
<li><strong>JavaFX</strong>：用于构建现代用户界面应用，替代Swing和AWT，适用于桌面和移动应用的UI开发。</li>
</ul>
<h2 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h2><ul>
<li><strong>跨平台性（“一次编写，随处运行”）</strong>：Java程序通过编译成字节码，依赖于JVM（Java虚拟机）运行，确保在不同操作系统上可移植。</li>
<li><strong>面向对象</strong>：Java完全支持面向对象的编程理念，具有封装、继承和多态等特性，便于构建模块化和可扩展的应用。</li>
<li><strong>安全性</strong>：Java提供了强大的安全机制，如字节码校验、沙箱模型和权限管理，尤其适用于网络环境中的应用程序。</li>
<li><strong>垃圾回收机制</strong>：Java自动管理内存分配和释放，通过垃圾回收器（Garbage Collector）有效回收不再使用的对象，避免内存泄漏。</li>
<li><strong>多线程支持</strong>：Java原生支持多线程编程，允许开发者在程序中处理多个任务，提高程序的执行效率。</li>
<li><strong>丰富的标准库</strong>：Java提供了一个庞大的标准类库，涵盖I&#x2F;O、网络编程、数据结构、并发控制、GUI开发等领域。</li>
</ul>
<h2 id="Java的运行机制"><a href="#Java的运行机制" class="headerlink" title="Java的运行机制"></a>Java的运行机制</h2><ul>
<li><strong>编译过程</strong>：Java代码首先被编译为中间字节码（bytecode），存储在<code>.class</code>文件中。字节码独立于底层硬件和操作系统。</li>
<li><strong>JVM（Java虚拟机）</strong>：Java程序的字节码在各个平台的JVM中运行。JVM负责解释字节码并将其转换为机器代码，以便在特定平台上执行。</li>
<li><strong>JIT（即时编译器）</strong>：JVM内含的JIT编译器在运行时将频繁执行的字节码块动态编译为本地机器代码，从而提高性能。</li>
<li><strong>垃圾回收（Garbage Collection）</strong>：JVM管理对象的内存分配和回收，自动处理对象的生命周期，防止内存泄漏。通过标记-清除（Mark-and-Sweep）、标记-压缩等算法实现。</li>
<li><strong>类加载器（ClassLoader）</strong>：Java使用类加载器动态加载类到内存。类加载器负责将字节码文件加载到JVM内存，并对其进行字节码校验，保证代码的正确性和安全性。</li>
</ul>
<h2 id="Java运行环境的安装与配置"><a href="#Java运行环境的安装与配置" class="headerlink" title="Java运行环境的安装与配置"></a>Java运行环境的安装与配置</h2><h2 id="windows部署JDK"><a href="#windows部署JDK" class="headerlink" title="windows部署JDK"></a>windows部署JDK</h2><p><a href="https://meverikc.github.io/2024/10/10/2024-10-10-Java-JDK%E5%AE%89%E8%A3%85/">Java-JDK安装教程</a></p>
<h3 id="现在可以执行第一个程序了"><a href="#现在可以执行第一个程序了" class="headerlink" title="现在可以执行第一个程序了"></a>现在可以执行第一个程序了</h3><ol>
<li><p>新建一个<code>Hello.txt</code>, 在文件内输入</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件名后缀改为<code>.java</code></p>
</li>
<li><p>在命令行执行: </p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">javac Hello.java</span><br><span class="line">java Hello</span><br><span class="line"></span><br><span class="line"># 命令行输出:</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意:</strong></p>
<ol>
<li><code>javac</code>是对<code>Hello.java</code>文件进行编译生成可执行的<code>.class</code>文件的命令, 此时直接在此执行对应的</li>
<li><code>java</code>是执行程序的命令</li>
<li>文件名与类名必须相同</li>
</ol>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-4</title>
    <url>/2024/09/30/2024-09-30-Java-4/</url>
    <content><![CDATA[<h2 id="Java-数组"><a href="#Java-数组" class="headerlink" title="Java 数组"></a>Java 数组</h2><p>数组对于每一门编程语言来说都是重要的数据结构之一，当然不同语言对数组的实现及处理也不尽相同。</p>
<p>Java 语言中提供的数组是用来存储固定大小的同类型元素。</p>
<p>你可以声明一个数组变量，如 numbers[100] 来代替直接声明 100 个独立变量 number0，number1，….，number99。</p>
<p>本教程将为大家介绍 Java 数组的声明、创建和初始化，并给出其对应的代码。</p>
<span id="more"></span>

<h3 id="1-声明数组变量"><a href="#1-声明数组变量" class="headerlink" title="1. 声明数组变量"></a>1. 声明数组变量</h3><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar;   <span class="comment">// 首选的方法</span></span><br><span class="line"> </span><br><span class="line">或</span><br><span class="line"> </span><br><span class="line">dataType arrayRefVar[];  <span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong> 建议使用 <strong>dataType[] arrayRefVar</strong> 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C&#x2F;C++ 语言 ，在Java中采用是为了让 C&#x2F;C++ 程序员能够快速理解java语言。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>下面是这两种语法的代码示例: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span>[] myList;         <span class="comment">// 首选的方法</span></span><br><span class="line"> </span><br><span class="line">或</span><br><span class="line"> </span><br><span class="line"><span class="type">double</span> myList[];         <span class="comment">//  效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>

<h3 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2. 创建数组"></a>2. 创建数组</h3><p>Java语言使用new操作符来创建数组，语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br></pre></td></tr></table></figure>

<p>上面的语法语句做了两件事：</p>
<ul>
<li>一、使用 dataType[arraySize] 创建了一个数组。</li>
<li>二、把新创建的数组的引用赋值给变量 arrayRefVar。</li>
</ul>
<p>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br></pre></td></tr></table></figure>

<p>另外，你还可以使用如下的方式创建数组: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br></pre></td></tr></table></figure>

<p>数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestArray</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 数组大小</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 定义数组</span></span><br><span class="line">      <span class="type">double</span>[] myList = <span class="keyword">new</span> <span class="title class_">double</span>[size];</span><br><span class="line">      myList[<span class="number">0</span>] = <span class="number">5.6</span>;</span><br><span class="line">      myList[<span class="number">1</span>] = <span class="number">4.5</span>;</span><br><span class="line">      myList[<span class="number">2</span>] = <span class="number">3.3</span>;</span><br><span class="line">      myList[<span class="number">3</span>] = <span class="number">13.2</span>;</span><br><span class="line">      myList[<span class="number">4</span>] = <span class="number">4.0</span>;</span><br><span class="line">      myList[<span class="number">5</span>] = <span class="number">34.33</span>;</span><br><span class="line">      myList[<span class="number">6</span>] = <span class="number">34.0</span>;</span><br><span class="line">      myList[<span class="number">7</span>] = <span class="number">45.45</span>;</span><br><span class="line">      myList[<span class="number">8</span>] = <span class="number">99.993</span>;</span><br><span class="line">      myList[<span class="number">9</span>] = <span class="number">11123</span>;</span><br><span class="line">      <span class="comment">// 计算所有元素的总和</span></span><br><span class="line">      <span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">         total += myList[i];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;总和为： &quot;</span> + total);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例输出结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">总和为： <span class="number">11367.373</span></span><br></pre></td></tr></table></figure>

<p>下面的图片描绘了数组 myList。这里 myList 数组里有 10 个 double 元素，它的下标从 0 到 9。</p>
<p><img src="/../images/java-4_1.jpg"></p>
<h3 id="3-处理数组"><a href="#3-处理数组" class="headerlink" title="3. 处理数组"></a>3. 处理数组</h3><p>数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。</p>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>该实例完整地展示了如何创建、初始化和操纵数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestArray</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">double</span>[] myList = &#123;<span class="number">1.9</span>, <span class="number">2.9</span>, <span class="number">3.4</span>, <span class="number">3.5</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 打印所有数组元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">         System.out.println(myList[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 计算所有元素的总和</span></span><br><span class="line">      <span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">         total += myList[i];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Total is &quot;</span> + total);</span><br><span class="line">      <span class="comment">// 查找最大元素</span></span><br><span class="line">      <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> myList[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (myList[i] &gt; max) max = myList[i];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Max is &quot;</span> + max);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例编译运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.9</span></span><br><span class="line"><span class="number">2.9</span></span><br><span class="line"><span class="number">3.4</span></span><br><span class="line"><span class="number">3.5</span></span><br><span class="line">Total is <span class="number">11.7</span></span><br><span class="line">Max is <span class="number">3.5</span></span><br></pre></td></tr></table></figure>

<h3 id="4-For-Each-循环"><a href="#4-For-Each-循环" class="headerlink" title="4. For-Each 循环"></a>4. For-Each 循环</h3><p>JDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。</p>
<p>语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(type element: array)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><p>该实例用来显示数组 myList 中的所有元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestArray</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">double</span>[] myList = &#123;<span class="number">1.9</span>, <span class="number">2.9</span>, <span class="number">3.4</span>, <span class="number">3.5</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 打印所有数组元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">double</span> element: myList) &#123;</span><br><span class="line">         System.out.println(element);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例编译运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.9</span></span><br><span class="line"><span class="number">2.9</span></span><br><span class="line"><span class="number">3.4</span></span><br><span class="line"><span class="number">3.5</span></span><br></pre></td></tr></table></figure>

<h3 id="5-数组作为函数的参数"><a href="#5-数组作为函数的参数" class="headerlink" title="5. 数组作为函数的参数"></a>5. 数组作为函数的参数</h3><p>数组可以作为参数传递给方法。</p>
<p>例如，下面的例子就是一个打印 int 数组中元素的方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">printArray(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="6-数组作为函数的返回值"><a href="#6-数组作为函数的返回值" class="headerlink" title="6. 数组作为函数的返回值"></a>6. 数组作为函数的返回值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] list) &#123;</span><br><span class="line">  <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[list.length];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = result.length - <span class="number">1</span>; i &lt; list.length; i++, j--) &#123;</span><br><span class="line">    result[j] = list[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-多维数组"><a href="#7-多维数组" class="headerlink" title="7. 多维数组"></a>7. 多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[][] str = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure>

<h4 id="多维数组的动态初始化（以二维数组为例）"><a href="#多维数组的动态初始化（以二维数组为例）" class="headerlink" title="多维数组的动态初始化（以二维数组为例）"></a>多维数组的动态初始化（以二维数组为例）</h4><ol>
<li>直接为每一维分配空间，格式如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type[][] typeName = <span class="keyword">new</span> <span class="title class_">type</span>[typeLength1][typeLength2];</span><br></pre></td></tr></table></figure>

<p>type 可以为基本数据类型和复合数据类型，typeLength1 和 typeLength2 必须为正整数，typeLength1 为行数，typeLength2 为列数。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>二维数组 a 可以看成一个两行三列的数组。</p>
<ol start="2">
<li>从最高维开始，分别为每一维分配空间，例如：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[][] s = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>][];</span><br><span class="line">s[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">s[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Good&quot;</span>);</span><br><span class="line">s[<span class="number">0</span>][<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Luck&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;to&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;you&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p><strong>s[0]&#x3D;new String[2]</strong> 和 <strong>s[1]&#x3D;new String[3]</strong> 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 <strong>s0&#x3D;new String(“Good”)</strong> 等操作。</p>
<h4 id="多维数组的引用（以二维数组为例）"><a href="#多维数组的引用（以二维数组为例）" class="headerlink" title="多维数组的引用（以二维数组为例）"></a>多维数组的引用（以二维数组为例）</h4><p>对二维数组中的每个元素，引用方式为 **arrayName[index1][index2]**，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">num[<span class="number">1</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<h3 id="8-Arrays-类"><a href="#8-Arrays-类" class="headerlink" title="8. Arrays 类"></a>8. Arrays 类</h3><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p>
<p>具有以下功能：</p>
<ul>
<li><p>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</p>
</li>
<li><p>比较数组：通过 equals 方法比较数组中元素值是否相等。</p>
</li>
<li><p>给数组赋值：通过 fill 方法。</p>
</li>
<li><p>对数组排序：通过 sort 方法,按升序。</p>
</li>
</ul>
<p>具体说明请查看下表：</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法和说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>public static int binarySearch(Object[] a, Object key)</strong><br/>用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>public static boolean equals(long[] a, long[] a2)</strong><br/>如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>public static void fill(int[] a, int val)</strong><br/>将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>public static void sort(Object[] a)</strong><br/>对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>
</tr>
</tbody></table>
<h2 id="测验问题"><a href="#测验问题" class="headerlink" title="测验问题"></a>测验问题</h2><ol>
<li><p>以下代码输出什么？（ ）</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestIt</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span>[] myArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        ChangeIt.doIt( myArray );</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;myArray.length; j++)</span><br><span class="line">            System.out.print( myArray[j] + <span class="string">&quot; &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangeIt</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doIt</span><span class="params">( <span class="type">int</span>[] z )</span> </span><br><span class="line">    &#123;</span><br><span class="line">        z = <span class="literal">null</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> A. 1 2 3 4 5</p>
<p> B. 什么都不会打印出来</p>
<p> C. 程序将因运行时错误而停止</p>
<p> D. 0 0 0 0 0</p>
</li>
<li><p>以下代码输出什么？（ ）</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LowHighSwap</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doIt</span><span class="params">( <span class="type">int</span>[] z )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> z[z.length-<span class="number">1</span>];</span><br><span class="line">        z[z.length-<span class="number">1</span>] = z[<span class="number">0</span>];</span><br><span class="line">        z[<span class="number">0</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestIt</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span>[] myArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        LowHighSwap.doIt(myArray);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; myArray.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(myArray[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> A. 1 2 3 4 5</p>
<p> B. 5 2 3 4 1</p>
<p> C. 1 2 3 4 1</p>
<p> D. 5 2 3 4 5</p>
</li>
<li><p>Java 使用按值调用。 以下方法调用传递给程序的值是多少 ？（ ）</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span>[] rats = &#123;<span class="number">1.2</span>, <span class="number">3.4</span>, <span class="number">5.6</span>&#125;;</span><br><span class="line">routine( rats );</span><br></pre></td></tr></table></figure>

<p> A. rats 的副本</p>
<p> B. rats 数组元素的值</p>
<p> C. rats 数组的引用</p>
<p> D. 1.2</p>
</li>
</ol>
<p><a href="https://www.jyshare.com/quiz/5571/">更过测验请点击</a> </p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-5</title>
    <url>/2024/11/05/2024-11-05-Java-5/</url>
    <content><![CDATA[<h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h2><p>字符串广泛应用 在 Java 编程中，在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串。</p>
<hr>
<h3 id="1-创建字符串"><a href="#1-创建字符串" class="headerlink" title="1. 创建字符串"></a>1. 创建字符串</h3><p>创建字符串最简单的方式如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在代码中遇到字符串常量时，这里的值是 “<strong>Hello,World!</strong>“，编译器会使用该值创建一个 String 对象。</p>
<p>和其它对象一样，可以使用关键字和构造方法来创建 String 对象。</p>
<p>用构造函数创建字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>String 创建的字符串存储在公共池中，而 new 创建的字符串对象在堆上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;               <span class="comment">// String 直接创建</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;               <span class="comment">// String 直接创建</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s1;                    		  <span class="comment">// 相同引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello,World!&quot;</span>);   <span class="comment">// String 对象创建</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello,World!&quot;</span>);   <span class="comment">// String 对象创建</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/java-5_1.png"></p>
<p>String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">char</span>[] helloArray = &#123; <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">      <span class="type">String</span> <span class="variable">helloString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(helloArray);  </span><br><span class="line">      System.out.println( helloString );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例编译运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure>

<p>**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。</p>
<p>如果需要对字符串做很多修改，那么应该选择使用 <a href="">StringBuffer &amp; StringBuilder 类</a>。</p>
<h3 id="2-字符串长度"><a href="#2-字符串长度" class="headerlink" title="2. 字符串长度"></a>2. 字符串长度</h3><p>用于获取有关对象的信息的方法称为访问器方法。</p>
<p>String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。</p>
<p>下面的代码执行后，len 变量等于 14:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">site</span> <span class="operator">=</span> <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> site.length();</span><br><span class="line">        System.out.println( <span class="string">&quot;百度网址长度 : &quot;</span> + len );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例编译运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">百度网址长度 : 14</span><br></pre></td></tr></table></figure>

<h3 id="3-连接字符串"><a href="#3-连接字符串" class="headerlink" title="3. 连接字符串"></a>3. 连接字符串</h3><p>String 类提供了连接两个字符串的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">string1.concat(string2);</span><br></pre></td></tr></table></figure>

<p>返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;我的名字是 &quot;</span>.concat(<span class="string">&quot;john&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>更常用的是使用’+’操作符来连接字符串，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Hello,&quot;</span> + <span class="string">&quot; john&quot;</span> + <span class="string">&quot;!&quot;</span></span><br></pre></td></tr></table></figure>



<p>结果如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello, john!</span><br></pre></td></tr></table></figure>

<p>下面是一个例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;     </span><br><span class="line">        <span class="type">String</span> <span class="variable">string1</span> <span class="operator">=</span> <span class="string">&quot;百度网址：&quot;</span>;     </span><br><span class="line">        System.out.println(<span class="string">&quot;1、&quot;</span> + string1 + <span class="string">&quot;www.baidu.com&quot;</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例编译运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、百度网址：www.baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="4-创建格式化字符串"><a href="#4-创建格式化字符串" class="headerlink" title="4. 创建格式化字符串"></a>4. 创建格式化字符串</h3><p>我们知道输出格式化数字可以使用 printf() 和 format() 方法。</p>
<p>String 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。</p>
<p>String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p>
<p>如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class="line">                  <span class="string">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;is %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>

<p>你也可以这样写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String fs;</span><br><span class="line">fs = String.format(<span class="string">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class="line">                   <span class="string">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class="line">                   <span class="string">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class="line">                   <span class="string">&quot; %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>

<h3 id="5-String-方法"><a href="#5-String-方法" class="headerlink" title="5. String 方法"></a>5. String 方法</h3><p>下面是 String 类支持的方法，更多详细，参看 Java String API文档:</p>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/index.html">官方文档</a></p>
<p><a href="http://meverikc.top:8080/javaapi">中文在线文档</a></p>
<p><a href="http://www.meverikc.top:8080/javaapi/java.base/java/lang/String.html#method.summary">String类内容</a></p>
<p><a href="https://github.com/MeverikC/meverikc.github.io/releases/tag/latest">中文文档下载</a> </p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-3</title>
    <url>/2024/09/30/2024-09-30-Java-3/</url>
    <content><![CDATA[<h3 id="标准关键字"><a href="#标准关键字" class="headerlink" title="标准关键字"></a>标准关键字</h3><ul>
<li><strong>abstract</strong> - 用于声明抽象类或方法。抽象类不能被实例化，而抽象方法没有实现。</li>
<li><strong>assert</strong> - 用于断言，在开发阶段帮助检查假设条件是否为真。</li>
<li><strong>boolean</strong> - 基本数据类型，表示真或假的值。<span id="more"></span></li>
<li><strong>break</strong> - 用于终止循环或 <code>switch</code> 语句。</li>
<li><strong>byte</strong> - 基本数据类型，8位有符号整数。</li>
<li><strong>case</strong> - 用于 <code>switch</code> 语句中的分支。</li>
<li><strong>catch</strong> - 与 <code>try</code> 结合使用来捕获异常。</li>
<li><strong>char</strong> - 基本数据类型，单个16位Unicode字符。</li>
<li><strong>class</strong> - 定义一个新类。</li>
<li><strong>continue</strong> - 跳过当前循环体剩余部分并继续下一次迭代。</li>
<li><strong>default</strong> - 在 <code>switch</code> 语句中提供默认情况；在接口中定义默认方法。</li>
<li><strong>do</strong> - 开始一个 <code>do-while</code> 循环。</li>
<li><strong>double</strong> - 基本数据类型，双精度浮点数。</li>
<li><strong>else</strong> - 与 <code>if</code> 一起使用，当 <code>if</code> 条件不成立时执行的代码块。</li>
<li><strong>enum</strong> - 定义枚举类型。</li>
<li><strong>extends</strong> - 表示一个类继承另一个类或一个接口扩展另一个接口。</li>
<li><strong>final</strong> - 用于声明不可修改的变量、不可继承的类或不可重写的方法。</li>
<li><strong>finally</strong> - 与 <code>try-catch</code> 结构一起使用，确保某些代码无论是否有异常抛出都会被执行。</li>
<li><strong>float</strong> - 基本数据类型，单精度浮点数。</li>
<li><strong>for</strong> - 用于创建循环。</li>
<li><strong>if</strong> - 用于条件判断。</li>
<li><strong>implements</strong> - 表示一个类实现了某个接口。</li>
<li><strong>import</strong> - 导入其他包中的类或静态成员。</li>
<li><strong>instanceof</strong> - 检查对象是否属于特定类型。</li>
<li><strong>int</strong> - 基本数据类型，32位有符号整数。</li>
<li><strong>interface</strong> - 定义一个接口。</li>
<li><strong>long</strong> - 基本数据类型，64位有符号整数。</li>
<li><strong>native</strong> - 表示该方法用其他语言实现。</li>
<li><strong>new</strong> - 创建一个新的对象实例。</li>
<li><strong>package</strong> - 定义一个包。</li>
<li><strong>private</strong> - 访问修饰符，限制对类、方法或变量的访问。</li>
<li><strong>protected</strong> - 访问修饰符，允许子类或同一包内的类访问。</li>
<li><strong>public</strong> - 访问修饰符，不限制访问。</li>
<li><strong>return</strong> - 从方法返回值。</li>
<li><strong>short</strong> - 基本数据类型，16位有符号整数。</li>
<li><strong>static</strong> - 定义静态变量或方法，它们属于类而不是类的实例。</li>
<li><strong>strictfp</strong> - 确保浮点运算遵循IEEE 754标准。</li>
<li><strong>super</strong> - 引用当前对象的父类。</li>
<li><strong>switch</strong> - 用于多路分支选择。</li>
<li><strong>synchronized</strong> - 用于控制多线程对共享资源的访问。</li>
<li><strong>this</strong> - 引用当前对象的实例。</li>
<li><strong>throw</strong> - 抛出一个异常。</li>
<li><strong>throws</strong> - 声明方法可能抛出的异常。</li>
<li><strong>transient</strong> - 标记不应被序列化的变量。</li>
<li><strong>try</strong> - 尝试执行一段可能会抛出异常的代码。</li>
<li><strong>void</strong> - 表示方法不返回任何值。</li>
<li><strong>volatile</strong> - 确保变量的修改对所有线程可见。</li>
<li><strong>while</strong> - 用于创建循环。</li>
</ul>
<h3 id="预留关键字（不常用）"><a href="#预留关键字（不常用）" class="headerlink" title="预留关键字（不常用）"></a>预留关键字（不常用）</h3><ul>
<li><strong>const</strong> - 保留字，但未使用。</li>
<li><strong>goto</strong> - 保留字，但未使用。</li>
</ul>
<p>这些关键字是构成 Java 语言的基础，每个都有其特定的功能和用途。在编写 Java 代码时，了解这些关键字及其用法是非常重要的。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-JDK安装</title>
    <url>/2024/10/10/2024-10-10-Java-JDK%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="Windows安装Java-11的完整教程"><a href="#Windows安装Java-11的完整教程" class="headerlink" title="Windows安装Java 11的完整教程"></a>Windows安装Java 11的完整教程</h3><p>以下是详细的步骤来帮助你在Windows系统中安装Java 11并配置环境变量。</p>
<h4 id="1-下载Java-11-JDK"><a href="#1-下载Java-11-JDK" class="headerlink" title="1. 下载Java 11 JDK"></a>1. 下载Java 11 JDK</h4><ol>
<li>打开你的浏览器，访问<a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html">Oracle JDK下载页面</a></li>
<li>在页面中找到<code>Windows安装包</code>，选择<code>Windows x64</code> <code>Installer</code> 并下载。 <span id="more"></span><br> <img src="/../images/jdk11_install.png"></li>
</ol>
<h4 id="2-安装Java-11-JDK"><a href="#2-安装Java-11-JDK" class="headerlink" title="2. 安装Java 11 JDK"></a>2. 安装Java 11 JDK</h4><ol>
<li>下载完成后，双击安装文件（<code>.exe</code>）启动安装向导。</li>
<li>在安装过程中，选择安装路径（默认是<code>C:\Program Files\Java\jdk-11.x.x</code>，可以更改路径）。点击<code>Next</code>继续。</li>
<li>等待安装完成，点击<code>Close</code>。</li>
</ol>
<h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h4><ol>
<li>右键点击<code>此电脑</code>或<code>计算机</code>，选择<code>属性</code>。<br> <img src="/../images/ENV-set1.png"></li>
<li>选择<code>高级系统设置</code>，点击弹出窗口中的<code>环境变量</code>。<br> <img src="/../images/ENV-set2.png"><br> <img src="/../images/ENV-set3.png"></li>
<li>在系统变量下点击下<code>新建</code><br> <img src="/../images/ENV-set4.png"></li>
<li>在弹出的窗口内的变量名输入<code>JAVA_HOME</code>, 在变量值输入<code>C:\Program Files\Java\jdk-11</code><br> <img src="/../images/ENV-set5.png"><br> 输入完点击<code>确定</code> </li>
<li>在<code>系统变量</code>部分找到并选择<code>Path</code>，然后点击<code>编辑</code>。<br> <img src="/../images/ENV-set6.png"></li>
<li>点击<code>新建</code>，并添加以下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br></pre></td></tr></table></figure>
点击<code>确定</code>保存修改。</li>
</ol>
<h4 id="4-验证Java安装"><a href="#4-验证Java安装" class="headerlink" title="4. 验证Java安装"></a>4. 验证Java安装</h4><ol>
<li>打开<code>命令提示符</code>（按下<code>Windows键 + R</code>，输入<code>cmd</code>并回车）。</li>
<li>输入以下命令检查Java是否安装成功：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
如果成功，你会看到类似如下输出，显示Java 11的版本信息：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java version &quot;11.x.x&quot;</span><br><span class="line">Java(TM) SE Runtime Environment 18.x.x (build 11.x.x)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 11.x.x, mixed mode)</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="5-验证JAVA-HOME设置"><a href="#5-验证JAVA-HOME设置" class="headerlink" title="5. 验证JAVA_HOME设置"></a>5. 验证<code>JAVA_HOME</code>设置</h4><ol>
<li>在<code>命令提示符</code>中输入以下命令，确认<code>JAVA_HOME</code>是否设置正确：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo %JAVA_HOME%</span><br></pre></td></tr></table></figure>
它应该返回你的JDK安装路径，如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program Files\Java\jdk-11.x.x</span><br></pre></td></tr></table></figure></li>
</ol>
<p>至此，你已经成功在Windows系统上安装并配置了Java 11。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm使用</title>
    <url>/2024/11/21/2024-11-21-nvm%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#  查看可安装的node版本</span><br><span class="line">nvm list available</span><br><span class="line"></span><br><span class="line">#  安装指定版本node</span><br><span class="line">nvm install 版本号</span><br><span class="line"></span><br><span class="line">#  查看已经安装的版本</span><br><span class="line">nvm list installed </span><br><span class="line"></span><br><span class="line">#  查看已安装版本的node</span><br><span class="line">nvm list / nvm ls</span><br><span class="line"></span><br><span class="line">#  切换使用指定的版本的node</span><br><span class="line">nvm use 已安装版本号</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>nvm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-6</title>
    <url>/2024/11/12/2024-11-12-Java-6/</url>
    <content><![CDATA[<h3 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h3><p>Java中的容器（Collections）是指用于存储和操作一组数据的对象。Java提供了丰富的容器类，这些类在<code>java.util</code>包中实现。容器主要分为两大类：<strong>Collection</strong>和<strong>Map</strong>。以下将详细介绍Java容器的分类、常用实现类及其特点。<br><img src="/../images/Java-6_1.png"></p>
<hr>
<span id="more"></span>

<h2 id="一、Java容器分类"><a href="#一、Java容器分类" class="headerlink" title="一、Java容器分类"></a>一、Java容器分类</h2><h3 id="1-Collection接口"><a href="#1-Collection接口" class="headerlink" title="1. Collection接口"></a>1. Collection接口</h3><p>Collection是一个存储单一元素的集合，可以进一步分为以下三种：</p>
<ul>
<li><strong>List</strong>：有序且允许重复的集合。</li>
<li><strong>Set</strong>：无序且不允许重复的集合。</li>
<li><strong>Queue</strong>：用于存储具有优先级关系的队列集合。</li>
</ul>
<h3 id="2-Map接口"><a href="#2-Map接口" class="headerlink" title="2. Map接口"></a>2. Map接口</h3><p>Map是用于存储键值对的集合，其中键是唯一的，值可以重复。</p>
<hr>
<h2 id="二、Collection接口的实现类"><a href="#二、Collection接口的实现类" class="headerlink" title="二、Collection接口的实现类"></a>二、Collection接口的实现类</h2><h3 id="1-List接口"><a href="#1-List接口" class="headerlink" title="1. List接口"></a>1. List接口</h3><p>List接口的实现类有：<code>ArrayList</code>、<code>LinkedList</code>、<code>Vector</code>。</p>
<h4 id="1-1-ArrayList"><a href="#1-1-ArrayList" class="headerlink" title="1.1 ArrayList"></a>1.1 ArrayList</h4><ul>
<li><p><strong>特点</strong>：</p>
<ul>
<li>基于动态数组实现。</li>
<li>随机访问速度快，查询效率高（O(1)）。</li>
<li>插入和删除时需要移动元素，效率较低（O(n)）。</li>
</ul>
</li>
<li><p><strong>使用场景</strong>：适合查询多、修改少的场景。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        System.out.println(list); <span class="comment">// 输出：[Java, Python, C++]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList; <span class="comment">// 引入 ArrayList 类</span></span><br><span class="line"></span><br><span class="line">ArrayList&lt;E&gt; objectName =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();　 <span class="comment">// 初始化</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>E</strong>: 泛型数据类型，用于设置 objectName 的数据类型，<strong>只能为引用数据类型</strong>。</p>
</li>
<li><p><strong>objectName</strong>: 对象名。</p>
</li>
<li><p>ArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p>
<ul>
<li><p><strong>添加元素</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>访问元素</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        System.out.println(sites.get(<span class="number">1</span>));  <span class="comment">// 访问第二个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改元素</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        sites.set(<span class="number">2</span>, <span class="string">&quot;Wiki&quot;</span>); <span class="comment">// 第一个参数为索引位置，第二个为要修改的值</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除元素</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        sites.remove(<span class="number">3</span>); <span class="comment">// 删除第四个元素</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>计算大小</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        System.out.println(sites.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>迭代数组列表</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sites.size(); i++) &#123;</span><br><span class="line">            System.out.println(sites.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String i : sites) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ArrayList 排序</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;  <span class="comment">// 引入 Collections 类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Wiki&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Collections.sort(sites);  <span class="comment">// 字母排序</span></span><br><span class="line">        <span class="keyword">for</span> (String i : sites) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;  <span class="comment">// 引入 Collections 类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; myNumbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        myNumbers.add(<span class="number">33</span>);</span><br><span class="line">        myNumbers.add(<span class="number">15</span>);</span><br><span class="line">        myNumbers.add(<span class="number">20</span>);</span><br><span class="line">        myNumbers.add(<span class="number">34</span>);</span><br><span class="line">        myNumbers.add(<span class="number">8</span>);</span><br><span class="line">        myNumbers.add(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        Collections.sort(myNumbers);  <span class="comment">// 数字排序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : myNumbers) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="http://www.meverikc.top:8080/javaapi/java.base/java/util/ArrayList.html"><strong>Java ArrayList方法</strong></a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="1-2-LinkedList"><a href="#1-2-LinkedList" class="headerlink" title="1.2 LinkedList"></a>1.2 LinkedList</h4><ul>
<li><strong>特点</strong>：<ul>
<li>基于双向链表实现。</li>
<li>插入和删除效率高（O(1)）。</li>
<li>随机访问效率低（O(n)）。</li>
</ul>
</li>
<li><strong>使用场景</strong>：适合频繁插入、删除操作的场景。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        list.addFirst(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        System.out.println(list); <span class="comment">// 输出：[C, A, B]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-3-Vector"><a href="#1-3-Vector" class="headerlink" title="1.3 Vector"></a>1.3 Vector</h4><ul>
<li><strong>特点</strong>：<ul>
<li>线程安全（方法加了<code>synchronized</code>修饰）。</li>
<li>性能较<code>ArrayList</code>低。</li>
</ul>
</li>
<li><strong>不推荐使用</strong>：在大部分场景下，<code>ArrayList</code>性能更优。</li>
</ul>
<hr>
<h3 id="2-Set接口"><a href="#2-Set接口" class="headerlink" title="2. Set接口"></a>2. Set接口</h3><p>Set接口的实现类有：<code>HashSet</code>、<code>TreeSet</code>、<code>LinkedHashSet</code>。<br><img src="/../images/Java-6_2.png"></p>
<h4 id="2-1-HashSet"><a href="#2-1-HashSet" class="headerlink" title="2.1 HashSet"></a>2.1 HashSet</h4><ul>
<li><p><strong>特点</strong>：</p>
<ul>
<li>基于<code>HashMap</code>实现。</li>
<li>元素无序且不允许重复。</li>
<li>插入、删除、查找的时间复杂度为O(1)。</li>
</ul>
</li>
<li><p><strong>使用场景</strong>：需要高效的去重操作。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.add(<span class="number">2</span>); <span class="comment">// 重复元素不会被添加</span></span><br><span class="line">        System.out.println(set); <span class="comment">// 输出：[1, 2]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用:</strong><br>HashSet 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet; <span class="comment">// 引入 HashSet 类</span></span><br></pre></td></tr></table></figure>

<p>以下实例我们创建一个 HashSet 对象 sites，用于保存字符串元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>添加元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);  <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>判断元素是否存在</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);  <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        System.out.println(sites.contains(<span class="string">&quot;Taobao&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="comment">// remove方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);     <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        sites.remove(<span class="string">&quot;Taobao&quot;</span>);  <span class="comment">// 删除元素，删除成功返回 true，否则为 false</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="comment">// 删除集合中所有元素可以使用 clear 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);     <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        sites.clear();  </span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>计算大小</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);     <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        System.out.println(sites.size());  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>迭代 HashSet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);     <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        <span class="keyword">for</span> (String i : sites) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="http://www.meverikc.top:8080/javaapi/java.base/java/util/HashSet.html"><strong>HashSet方法</strong></a></p>
</li>
</ul>
</li>
</ul>
<h4 id="2-2-TreeSet"><a href="#2-2-TreeSet" class="headerlink" title="2.2 TreeSet"></a>2.2 TreeSet</h4><ul>
<li><strong>特点</strong>：<ul>
<li>基于<code>TreeMap</code>实现，底层是红黑树。</li>
<li>元素有序（自然顺序或自定义排序）。</li>
<li>插入、删除、查找的时间复杂度为O(log n)。</li>
</ul>
</li>
<li><strong>使用场景</strong>：需要排序的集合。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;Cherry&quot;</span>);</span><br><span class="line">        System.out.println(set); <span class="comment">// 输出：[Apple, Banana, Cherry]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-3-LinkedHashSet"><a href="#2-3-LinkedHashSet" class="headerlink" title="2.3 LinkedHashSet"></a>2.3 LinkedHashSet</h4><ul>
<li><strong>特点</strong>：<ul>
<li>保证插入顺序。</li>
<li>基于<code>HashSet</code>，通过链表维护顺序。</li>
</ul>
</li>
<li><strong>使用场景</strong>：既需要去重又需要保持顺序。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedHashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        System.out.println(set); <span class="comment">// 输出：[A, B, C]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="3-Queue接口"><a href="#3-Queue接口" class="headerlink" title="3. Queue接口"></a>3. Queue接口</h3><p>Queue接口的常见实现类有：<code>PriorityQueue</code>、<code>LinkedList</code>（实现了Deque接口）。</p>
<h4 id="3-1-PriorityQueue"><a href="#3-1-PriorityQueue" class="headerlink" title="3.1 PriorityQueue"></a>3.1 PriorityQueue</h4><ul>
<li><strong>特点</strong>：<ul>
<li>基于堆实现。</li>
<li>元素按优先级排序。</li>
</ul>
</li>
<li><strong>使用场景</strong>：需要实现优先级队列。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        queue.add(<span class="number">10</span>);</span><br><span class="line">        queue.add(<span class="number">5</span>);</span><br><span class="line">        queue.add(<span class="number">20</span>);</span><br><span class="line">        System.out.println(queue.poll()); <span class="comment">// 输出：5（最小值）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="三、Map接口的实现类"><a href="#三、Map接口的实现类" class="headerlink" title="三、Map接口的实现类"></a>三、Map接口的实现类</h2><h3 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1. HashMap"></a>1. HashMap</h3><p><img src="/../images/Java-6_3.png"></p>
<ul>
<li><pre><code class="java">1. HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。

2. HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。

3. HashMap 是无序的，即不会记录插入的顺序。

4. HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **特点**：</span><br><span class="line"></span><br><span class="line">  - 基于哈希表实现，键值对无序。</span><br><span class="line">  - 插入、删除、查找的时间复杂度为O(1)。</span><br><span class="line">  - JDK 1.8开始，链表长度超过阈值时使用红黑树优化。</span><br><span class="line">- **示例**：</span><br><span class="line">  ```java</span><br><span class="line">  import java.util.HashMap;</span><br><span class="line">  public class Main &#123;</span><br><span class="line">      public static void main(String[] args) &#123;</span><br><span class="line">          HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">          map.put(&quot;Apple&quot;, 3);</span><br><span class="line">          map.put(&quot;Banana&quot;, 2);</span><br><span class="line">          System.out.println(map.get(&quot;Apple&quot;)); // 输出：3</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p><strong>使用:</strong><br>HashMap 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap; <span class="comment">// 引入 HashMap 类</span></span><br></pre></td></tr></table></figure>

<p>以下实例我们创建一个 HashMap 对象 Sites， 整型（Integer）的 key 和字符串（String）类型的 value：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>添加元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        System.out.println(Sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>访问元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        System.out.println(Sites.get(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        Sites.remove(<span class="number">4</span>);</span><br><span class="line">        System.out.println(Sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除所有键值对使用 cleat 方法: </span></span><br><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        Sites.clear();</span><br><span class="line">        System.out.println(Sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>计算大小</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        System.out.println(Sites.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>迭代 HashMap</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出 key 和 value</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : Sites.keySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + i + <span class="string">&quot; value: &quot;</span> + Sites.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回所有 value 值</span></span><br><span class="line">        <span class="keyword">for</span>(String value: Sites.values()) &#123;</span><br><span class="line">          <span class="comment">// 输出每一个value</span></span><br><span class="line">          System.out.print(value + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="http://www.meverikc.top:8080/javaapi/java.base/java/util/HashMap.html"><strong>Java HashMap方法</strong></a></p>
</li>
</ul>
</li>
</ul>
<h3 id="2-TreeMap"><a href="#2-TreeMap" class="headerlink" title="2. TreeMap"></a>2. TreeMap</h3><ul>
<li><strong>特点</strong>：<ul>
<li>基于红黑树实现，键有序。</li>
<li>插入、删除、查找的时间复杂度为O(log n)。</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;Orange&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Apple&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(map); <span class="comment">// 输出：&#123;Apple=10, Orange=5&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-LinkedHashMap"><a href="#3-LinkedHashMap" class="headerlink" title="3. LinkedHashMap"></a>3. LinkedHashMap</h3><ul>
<li><strong>特点</strong>：<ul>
<li>保证插入顺序。</li>
<li>基于<code>HashMap</code>实现，维护了一个双向链表。</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedHashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;One&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Two&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(map); <span class="comment">// 输出：&#123;One=1, Two=2&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="四、容器工具类"><a href="#四、容器工具类" class="headerlink" title="四、容器工具类"></a>四、容器工具类</h2><p>Java提供了<code>Collections</code>工具类，常用于容器的操作，如排序、查找、同步化等。</p>
<h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><ul>
<li><code>Collections.sort()</code>：排序。</li>
<li><code>Collections.shuffle()</code>：随机打乱顺序。</li>
<li><code>Collections.synchronizedList()</code>：将容器同步化。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list); <span class="comment">// 输出：[1, 2, 3]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>Java容器为我们提供了高效的数据存储和操作能力，选择合适的容器对于提升程序性能非常重要。在实际开发中，根据场景需求选择对应的容器，例如：</p>
<ul>
<li>需要有序、可重复数据时使用<code>ArrayList</code>。</li>
<li>需要无序、去重数据时使用<code>HashSet</code>。</li>
<li>需要键值对存储时使用<code>HashMap</code>或<code>TreeMap</code>。</li>
</ul>
<p>深入理解每种容器的特性与适用场景是写出高质量Java代码的关键！</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>docker镜像挂了之后的解决方法</title>
    <url>/2024/11/23/docker%E9%95%9C%E5%83%8F%E6%8C%82%E4%BA%86%E4%B9%8B%E5%90%8E%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h2><p>使用Dockerfile build镜像的时候第一步的FROM全部超时, 环境都加载不了肯定就没办法运行程序了</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h2><h3 id="1-手动下载所需的环境镜像"><a href="#1-手动下载所需的环境镜像" class="headerlink" title="1. 手动下载所需的环境镜像"></a>1. 手动下载所需的环境镜像</h3><ol>
<li>我使用的是<code>python:3.12.3-alpine</code> , 需要在科学上网的机器上下载该镜像 <span id="more"></span></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull python:3.12.3-alpine</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>导出该镜像</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o python-3.12.3-alpine.tar python:3.12.3-alpine</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>把<code>python-3.12.3-alpine.tar</code>上传到云服务器</p>
</li>
<li><p>加载镜像</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load -i python-3.12.3-alpine.tar</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>这是就可以正常构建了, 因为docker在本地有镜像是会默认使用本地的, 本地没有镜像时才会访问docker hub</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd zuanboot</span><br><span class="line">docker build -t zuanboot .</span><br><span class="line">docker run -d --name zuanboot -v $(pwd):/app -p 8900:58000 zuanboot:latest</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>windows桌面美化</title>
    <url>/2024/11/23/windows%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="流程简介"><a href="#流程简介" class="headerlink" title="流程简介"></a>流程简介</h2><ol>
<li><p>使用到的工具:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. rainmeter # 主题</span><br><span class="line">2. 致美化主题: welfare(可选)</span><br><span class="line">3. winstep nexus</span><br><span class="line">4. wallpaper engine</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>
<ol start="2">
<li><p>sop: </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 下载rainmeter并安装</span><br><span class="line">2. 下载welfare,并安装</span><br><span class="line">3. 打开rainmeter设置, 加载welfare主题</span><br><span class="line">3. 下载winstep nexus并安装且运行, </span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p> <strong>注意事项:</strong> </p>
<ol>
<li><code>welfare</code> 的安装前必须先下载rainmeter</li>
<li>winstep nexus要使用科学上网</li>
<li></li>
</ol>
</blockquote>
<h3 id="1-rainmeter"><a href="#1-rainmeter" class="headerlink" title="1. rainmeter"></a>1. rainmeter</h3><ol>
<li><p><a href="https://www.rainmeter.net/">下载地址</a> </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.rainmeter.net/</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Meverikc</title>
    <url>/2024/11/21/index/</url>
    <content><![CDATA[<p ><h3 style="text-align: center;">Welcome to my blog!</h3></p>
<p style="text-align: center;">This is my collection and study notes. If you are interested, you can browse it at will.</p>
<p style="text-align: center;">This website generally contains the following contents: </p>
<div class="tabs" id="quick-links"><ul class="nav-tabs"><li class="tab active"><a href="#quick-links-1">Java</a></li><li class="tab"><a href="#quick-links-2">Recreation</a></li><li class="tab"><a href="#quick-links-3">Algorithm</a></li><li class="tab"><a href="#quick-links-4">Others</a></li></ul><div class="tab-content"><div class="tab-pane active" id="quick-links-1"><p><img src="/../images/java-logo.png"></p>
<p style="text-align: center;"><a href="/java/">Java</a></p></div><div class="tab-pane" id="quick-links-2"><div style="display: flex; height=200px; width=1000px;">
        <div style="width: 50%; padding: 10px; text-align: center;">
            <img src="../images/flappy-bird.png" alt="Flappy Bird" style="max-width: 100%; height: auto; max-height: 100%;"/>
            <p><a href="/game/index.html" >Try it</a></p>
        </div>
        <div style="width: 50%; padding: 10px; text-align: center;">
            <img src="../images/lovely.png" alt="Lovely" style="max-width: 40%; height: auto; max-height: 100%;"/>
            <p><a href="/lovely/index.html" >Look at it</a></p>
        </div>
    </div></div><div class="tab-pane" id="quick-links-3"><img src="../images/hello-logo.svg" alt="Hello Algo" style="max-width: 400px;"/>
<p style="text-align: center;">
    <a href="/hello-algo/index.html" >Look at it</a><br>
    I prepared a copy, I think it is quite useful
</p></div><div class="tab-pane" id="quick-links-4"><div class="note info">
            <ol><li><a href="/2024/09/19/2024-09-19-%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/">Hexo NexT主题优化</a></li></ol>
          </div>

<div class="note info">
            <ol start="2"><li><a href="/2024/09/29/docker%E9%95%9C%E5%83%8F%E6%8C%82%E4%BA%86%E4%B9%8B%E5%90%8E%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">docker镜像挂了之后的解决方法</a></li></ol>
          </div>

<div class="note info">
            <ol start="3"><li><a href="/2024/09/20/windows%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/">windows桌面美化</a></li></ol>
          </div></div></div></div>]]></content>
  </entry>
</search>
